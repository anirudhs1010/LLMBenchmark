'use server';
/**
 * @fileOverview A flow for generating text based on a prompt and control conditions.
 */

import dotenv from 'dotenv';
import { z } from 'zod';

// Load environment variables
dotenv.config();

const GenerateControlledTextInputSchema = z.object({
  prompt: z.string().describe('The main prompt or topic for text generation.'),
  targetLength: z.string().optional().describe('A description of the desired length (e.g., "around 500 words", "a short paragraph").'),
  style: z.string().optional().describe('The desired style or tone of the text (e.g., "Formal", "Humorous", "Technical").'),
});
export type GenerateControlledTextInput = z.infer<typeof GenerateControlledTextInputSchema>;

const GenerateControlledTextOutputSchema = z.object({
  generatedText: z.string().describe('The text generated by the LLM based on the prompt and controls.'),
});
export type GenerateControlledTextOutput = z.infer<typeof GenerateControlledTextOutputSchema>;

const GEMINI_API_KEY = process.env.GEMINI_API_KEY;

if (!GEMINI_API_KEY) {
  throw new Error('GEMINI_API_KEY environment variable is not set');
}

async function callGeminiAPI(prompt: string): Promise<string> {
  const escapedPrompt = prompt.replace(/"/g, '\\"');
  const options: RequestInit = {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: `{"contents":[{"parts":[{"text":"${escapedPrompt}"}]}],"generationConfig":{"temperature":0.7,"topK":40,"topP":0.95,"maxOutputTokens":2048}}`,
  };

  console.log('Gemini request body:', options.body);

  const response: Response = await fetch(`https://generativelanguage.googleapis.com/v1/models/gemini-2.0-flash:generateContent?key=${GEMINI_API_KEY}`, options);

  if (!response.ok) {
    const errorData = await response.json().catch(() => null);
    console.error('Gemini error response:', errorData);
    throw new Error(`Gemini API error: ${response.statusText}${errorData ? ` - ${JSON.stringify(errorData)}` : ''}`);
  }

  const data: any = await response.json();
  console.log('Gemini full response:', data);
  console.log('Gemini generated text:', data.candidates?.[0]?.content?.parts?.[0]?.text);

  if (!data.candidates?.[0]?.content?.parts?.[0]?.text) {
    throw new Error('Invalid response from Gemini API');
  }
  
  return data.candidates[0].content.parts[0].text;
}

export async function generateControlledText(input: GenerateControlledTextInput): Promise<GenerateControlledTextOutput> {
  try {
    let prompt = `You are a helpful assistant that generates text based on user requirements. Write about: "${input.prompt}"\n\n`;
    
    if (input.style) {
      prompt += `The text should be in a "${input.style}" style.\n`;
    }
    
    if (input.targetLength) {
      prompt += `The text should be approximately "${input.targetLength}" long.\n`;
    }

    prompt += '\nRespond with only the generated text, without any preamble or additional explanations.';

    console.log('Final prompt for Gemini:', prompt);
    const generatedText = await callGeminiAPI(prompt);
    console.log('Final generated text:', generatedText);
    return { generatedText };
  } catch (error) {
    console.error('Error generating text:', error);
    throw error;
  }
}
