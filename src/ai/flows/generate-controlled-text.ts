
'use server';
/**
 * @fileOverview A Genkit flow for generating text based on a prompt and control conditions.
 *
 * - generateControlledText - A function that handles the controlled text generation process.
 * - GenerateControlledTextInput - The input type for the generateControlledText function.
 * - GenerateControlledTextOutput - The return type for the generateControlledText function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GenerateControlledTextInputSchema = z.object({
  prompt: z.string().describe('The main prompt or topic for text generation.'),
  targetLength: z.string().optional().describe('A description of the desired length (e.g., "around 500 words", "a short paragraph").'),
  style: z.string().optional().describe('The desired style or tone of the text (e.g., "Formal", "Humorous", "Technical").'),
});
export type GenerateControlledTextInput = z.infer<typeof GenerateControlledTextInputSchema>;

const GenerateControlledTextOutputSchema = z.object({
  generatedText: z.string().describe('The text generated by the LLM based on the prompt and controls.'),
});
export type GenerateControlledTextOutput = z.infer<typeof GenerateControlledTextOutputSchema>;

export async function generateControlledText(input: GenerateControlledTextInput): Promise<GenerateControlledTextOutput> {
  return generateTextFlow(input);
}

const generationPrompt = ai.definePrompt({
  name: 'generateControlledTextPrompt',
  input: {schema: GenerateControlledTextInputSchema},
  output: {schema: GenerateControlledTextOutputSchema},
  prompt: `You are a helpful assistant that generates text based on user requirements.
The user wants you to write about: "{{prompt}}"

{{#if style}}
The text should be in a "{{style}}" style.
{{/if}}

{{#if targetLength}}
The text should be approximately "{{targetLength}}" long.
{{/if}}

Please generate the text. Ensure the output is only the generated text itself, without any preamble or additional explanations.
`,
});

const generateTextFlow = ai.defineFlow(
  {
    name: 'generateTextFlow',
    inputSchema: GenerateControlledTextInputSchema,
    outputSchema: GenerateControlledTextOutputSchema,
  },
  async (input) => {
    const {output} = await generationPrompt(input);
    // Assuming the model directly outputs the text as per the schema.
    // If the model wraps it, e.g. { generatedText: "..." }, this needs to be just output.generatedText
    if (output && typeof output.generatedText === 'string') {
      return { generatedText: output.generatedText };
    }
    // Fallback if the model output is just a string (less likely with output schema)
    if (typeof output === 'string') {
       return { generatedText: output };
    }
    // If the output is an object but not matching the schema, try to extract if possible or handle error
    // For simplicity, we expect the model to adhere to the output schema.
    // The prompt asks for `output.schema: GenerateControlledTextOutputSchema` which defines generatedText.
    // So, `output.generatedText` should be correct.
    if (output && (output as any).generatedText) {
      return { generatedText: (output as any).generatedText };
    }
    
    throw new Error('Failed to get structured output for generated text.');
  }
);
